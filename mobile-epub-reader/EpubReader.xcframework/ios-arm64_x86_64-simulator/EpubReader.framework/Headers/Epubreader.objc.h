// Objective-C API for talking to github.com/Ppang0405/bookshelf/mobile-epub-reader Go package.
//   gobind -lang=objc github.com/Ppang0405/bookshelf/mobile-epub-reader
//
// File is generated by gobind. Do not edit.

#ifndef __Epubreader_H__
#define __Epubreader_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class EpubreaderBookMetadata;
@class EpubreaderChapter;
@class EpubreaderReader;

/**
 * BookMetadata contains EPUB metadata
 */
@interface EpubreaderBookMetadata : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull title;
@property (nonatomic) NSString* _Nonnull author;
@property (nonatomic) NSString* _Nonnull description;
@property (nonatomic) NSString* _Nonnull publisher;
@property (nonatomic) NSString* _Nonnull language;
@property (nonatomic) NSString* _Nonnull identifier;
@end

/**
 * Chapter represents a chapter in the EPUB
 */
@interface EpubreaderChapter : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull title;
@property (nonatomic) long index;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull filepath;
@end

/**
 * Reader handles EPUB parsing and content extraction
 */
@interface EpubreaderReader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * FindChapterByTitle searches for a chapter by title (case-insensitive)
 */
- (long)findChapterByTitle:(NSString* _Nullable)title;
/**
 * GetBookProgress returns reading progress as percentage (0-100)
 */
- (double)getBookProgress:(long)currentChapter;
/**
 * GetChapterContent returns the content of a specific chapter
 */
- (NSString* _Nonnull)getChapterContent:(long)chapterIndex error:(NSError* _Nullable* _Nullable)error;
/**
 * GetChapterCount returns the number of chapters
 */
- (long)getChapterCount;
/**
 * GetChapterHTML returns the HTML content of a specific chapter
 */
- (NSString* _Nonnull)getChapterHTML:(long)chapterIndex error:(NSError* _Nullable* _Nullable)error;
/**
 * GetChapterTitle returns the title of a specific chapter
 */
- (NSString* _Nonnull)getChapterTitle:(long)chapterIndex;
// skipped method Reader.GetMetadata with unsupported parameter or return types

/**
 * GetNextChapterHTML returns the HTML content of the next chapter
 */
- (NSString* _Nonnull)getNextChapterHTML:(long)currentIndex error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPrevChapterHTML returns the HTML content of the previous chapter
 */
- (NSString* _Nonnull)getPrevChapterHTML:(long)currentIndex error:(NSError* _Nullable* _Nullable)error;
// skipped method Reader.GetTOC with unsupported parameter or return types

/**
 * HasNextChapter checks if there's a next chapter
 */
- (BOOL)hasNextChapter:(long)currentIndex;
/**
 * HasPrevChapter checks if there's a previous chapter
 */
- (BOOL)hasPrevChapter:(long)currentIndex;
@end

/**
 * CloseBook closes the current book and frees memory
 */
FOUNDATION_EXPORT void EpubreaderCloseBook(void);

/**
 * GetBookInfo returns book metadata as JSON string
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetBookInfo(void);

/**
 * GetChapterCount returns total number of chapters
 */
FOUNDATION_EXPORT long EpubreaderGetChapterCount(void);

/**
 * GetChapterHTMLByIndex returns chapter HTML content by index
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetChapterHTMLByIndex(long index);

/**
 * GetChapterTitleByIndex returns chapter title by index
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetChapterTitleByIndex(long index);

/**
 * GetNextChapterHTMLByIndex returns next chapter HTML content
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetNextChapterHTMLByIndex(long currentIndex);

/**
 * GetPrevChapterHTMLByIndex returns previous chapter HTML content
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetPrevChapterHTMLByIndex(long currentIndex);

/**
 * GetReadingProgress returns reading progress as percentage (0-100)
 */
FOUNDATION_EXPORT double EpubreaderGetReadingProgress(long currentChapter);

/**
 * GetTableOfContents returns TOC as JSON string
 */
FOUNDATION_EXPORT NSString* _Nonnull EpubreaderGetTableOfContents(void);

/**
 * HasNextChapterByIndex checks if there's a next chapter
 */
FOUNDATION_EXPORT BOOL EpubreaderHasNextChapterByIndex(long currentIndex);

/**
 * HasPrevChapterByIndex checks if there's a previous chapter
 */
FOUNDATION_EXPORT BOOL EpubreaderHasPrevChapterByIndex(long currentIndex);

/**
 * OpenEpub creates a new Reader from EPUB data
 */
FOUNDATION_EXPORT EpubreaderReader* _Nullable EpubreaderOpenEpub(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * OpenEpubFromBytes opens an EPUB from byte array (mobile-compatible)
 */
FOUNDATION_EXPORT BOOL EpubreaderOpenEpubFromBytes(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

#endif
